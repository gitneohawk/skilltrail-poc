// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------
// 共通・認証関連モデル
// -----------------------------------------------

enum Role {
  ADMIN
  MEMBER
  TALENT // Talent（候補者・学生）ロールを追加
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(TALENT) // デフォルトはTALENT

  // 企業担当者の場合
  company   Company? @relation("CompanyToUser", fields: [companyId], references: [corporateNumber])
  companyId String?

  // 人材（Talent）の場合
  talentProfile TalentProfile?

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -----------------------------------------------
// 企業関連モデル
// -----------------------------------------------

enum SponsorshipTier {
  NONE
  BRONZE
  SILVER
  GOLD
}

model Company {
  corporateNumber String @id
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  name                 String
  description          String?   @db.Text
  tagline              String?
  website              String?
  logoUrl              String?
  headerImageUrl       String?
  headerImageOffsetY   Int?      @default(50)
  industry             String?
  companySize          String?
  yearFounded          Int?
  headquarters         String?
  capitalStock         BigInt?
  mission              String?   @db.Text
  cultureAndValues     String?   @db.Text
  techStack            String[]
  employeeBenefits     String[]
  gallery              Json?
  securityTeamSize     String?
  hasCiso              Boolean?
  hasCsirt             Boolean?
  isCsirtMember        Boolean?
  securityCertifications String[]
  securityAreas        String[]
  conferenceParticipation String?
  certificationSupport    Boolean?
  sponsorshipTier      SponsorshipTier @default(NONE)

  users       User[]       @relation("CompanyToUser")
  contact     Contact?
  invitations Invitation[] @relation("CompanyToInvitation")
  inquiries   Inquiry[]    @relation("CompanyToInquiry")
  jobs        Job[]
}

model Contact {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  phone     String?
  company   Company @relation(fields: [companyId], references: [corporateNumber])
  companyId String  @unique
}

model Application {
  id          String   @id @default(cuid())
  email       String
  companyName String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
}

model ApprovedEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  company   Company  @relation("CompanyToInvitation", fields: [companyId], references: [corporateNumber])
  companyId String
  role      Role     @default(MEMBER)
}

model Inquiry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  fromName  String
  fromEmail String
  message   String   @db.Text
  company   Company  @relation("CompanyToInquiry", fields: [companyId], references: [corporateNumber])
  companyId String
  status    String   @default("NEW")
}

// -----------------------------------------------
// Talent（候補者・学生）関連モデル
// -----------------------------------------------

enum WorkPreference {
  ONSITE
  HYBRID
  REMOTE
}

enum TalentType {
  STUDENT
  PROFESSIONAL
}

model TalentProfile {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  talentType      TalentType @default(PROFESSIONAL)
  fullName        String
  age             Int?
  gender          String?
  postalCode      String?
  prefecture      String?
  city            String?
  addressDetail   String?
  phone           String?
  workLocationPreferences String[]
  schoolName      String?
  graduationYear  Int?
  wantsInternship Boolean? // ★ この行を追加
  desiredJobTitles String[]
  otherDesiredJobTitle String?
  workPreference  WorkPreference?
  hybridDaysOnsite Int?
  careerSummary   String?  @db.Text
  isPublic        Boolean  @default(false)
  allowScouting   Boolean  @default(true)
  certificationsOther String?

  user            User               @relation(fields: [userId], references: [id])
  userId          String             @unique
  workHistory     WorkExperience[]
  skills          TalentSkill[]
  certifications  TalentCertification[]
  analysisResults AnalysisResult[] // 過去の診断結果を保持
  skillInterviews SkillInterview[]

}

model WorkExperience {
  id              String        @id @default(cuid())
  companyName     String
  role            String
  startDate       DateTime
  endDate         DateTime?
  description     String?       @db.Text
  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String
}

model Skill {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  talents TalentSkill[]
}

model TalentSkill {
  talent          TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String
  skill           Skill         @relation(fields: [skillId], references: [id])
  skillId         Int
  level           Int?

  @@id([talentProfileId, skillId])
}

model Certification {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  talents TalentCertification[]
}

model TalentCertification {
  talent          TalentProfile   @relation(fields: [talentProfileId], references: [id])
  talentProfileId String
  certification   Certification   @relation(fields: [certificationId], references: [id])
  certificationId Int
  acquiredAt      DateTime?

  @@id([talentProfileId, certificationId])
}

// --- ここからAI診断関連モデルを追加 ---

model AnalysisResult {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())

  // AIによる分析テキスト
  summary           String   @db.Text
  strengths         String   @db.Text
  advice            String   @db.Text
  skillGapAnalysis  String   @db.Text
  experienceMethods String   @db.Text

  // 関連
  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String

  roadmapSteps LearningRoadmapStep[]
}

model LearningRoadmapStep {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  stepNumber     Int
  title          String
  isCompleted    Boolean  @default(false)
  details        Json // 推奨アクションや参考リソースなどを柔軟に格納
  fullContent    String?  @db.Text // ★ この行を追加: 詳細コンテンツのキャッシュ用

  // 関連
  analysisResult   AnalysisResult @relation(fields: [analysisResultId], references: [id])
  analysisResultId String
}

// -----------------------------------------------
// 求人関連モデル
// -----------------------------------------------
enum JobStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Job {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String
  description     String    @db.Text
  status          JobStatus @default(DRAFT)
  employmentType  String?
  location        String?
  salaryRange     String?
  requiredSkills  String[]
  preferredSkills String[]
  company         Company   @relation(fields: [companyId], references: [corporateNumber])
  companyId       String
}

// -----------------------------------------------
// スキルインタビュー関連モデル
// -----------------------------------------------
enum InterviewStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}
// ★ 新しいStatusを追加
enum ExtractionStatus {
  NOT_STARTED
  PROCESSING
  COMPLETED
  FAILED
}

model SkillInterview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    InterviewStatus @default(IN_PROGRESS)

  extractionStatus ExtractionStatus @default(NOT_STARTED)
  extractionError  String?

  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String

  messages  SkillInterviewMessage[]
　aiExtractedSkills AiExtractedSkill[]
}

model SkillInterviewMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  role      String   // "user" または "assistant"
  content   String   @db.Text

  interview   SkillInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId String
}

model AiExtractedSkill {
  id        String   @id @default(cuid())
  skillName String
  level     Int?
  category  String   // "プログラミング言語", "役割", "ソフトスキル" など、AIが判断したカテゴリ
  source    String   @default("AI_INTERVIEW")

  interview   SkillInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId String
}
